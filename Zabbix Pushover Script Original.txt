try {
    var params = JSON.parse(value),
        request = new CurlHttpRequest(),
        data,
        response;

    if (typeof params.HTTPProxy === 'string' && params.HTTPProxy.trim() !== '') {
        request.SetProxy(params.HTTPProxy);
    }

    if (isNaN(params.priority) || params.priority < -2 || params.priority > 2) {
        throw 'field "priority" should be -2..2';
    }

    if (isNaN(params.triggerid)) {
        throw 'field "triggerid" is not a number';
    }

    if (isNaN(params.eventid)) {
        throw 'field "eventid" is not a number';
    }

    if (typeof params.message !== 'string' || params.message.trim() === '') {
        throw 'field "message" cannot be empty';
    }

    data = {
        token: params.token,
        user: params.user,
        title: params.title,
        message: params.message,
        url: params.url + '/tr_events.php?triggerid=' + params.triggerid + '&eventid=' + params.eventid,
        url_title: params.url_title,
        priority: params.priority
    };

    if (params.priority == 2) {
        if (isNaN(params.retry) || params.retry < 30) {
            throw 'field "retry" should be a number with value of at least 30 if "priority" is set to 2';
        }

        if (isNaN(params.expire) || params.expire > 10800) {
            throw 'field "expire" should be a number with value of at most 10800 if "priority" is set to 2';
        }

        data.retry = params.retry;
        data.expire = params.expire;
    }

    data = JSON.stringify(data);
    Zabbix.Log(4, '[ Pushover Webhook ] Sending request: ' + params.endpoint + '\n' + data);

    request.AddHeader('Content-Type: application/json');
    response = request.Post(params.endpoint, data);

    Zabbix.Log(4, '[ Pushover Webhook ] Received response with status code ' + request.Status() + '\n' + response);

    if (response !== null) {
        try {
            response = JSON.parse(response);
        }
        catch (error) {
            Zabbix.Log(4, '[ Pushover Webhook ] Failed to parse response received from Pushover');
            response = null;
        }
    }

    if (request.Status() != 200 || response === null || typeof response !== 'object' || response.status !== 1) {
        if (response !== null && typeof response === 'object' && typeof response.errors === 'object'
                && typeof response.errors[0] === 'string') {
            throw response.errors[0];
        }
        else {
            throw 'Unknown error. Check debug log for more information.';
        }
    }

    return 'OK';
}
catch (error) {
    Zabbix.Log(4, '[ Pushover Webhook ] Pushover notification failed: ' + error);
    throw 'Pushover notification failed: ' + error;
}